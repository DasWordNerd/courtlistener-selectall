"""
This page is meant to be run in conjunction with a running developer
environment for courtlistener.com.  It is not meant to be perfect or to make
exact replicas of the data but to be a quick and dirty way to get data into
our systems and for testing and review purposes.
"""
import os

import environ
import requests
from django.db import transaction

from cl.lib.command_utils import VerboseCommand
from cl.search.models import Opinion, OpinionCluster, Docket, Citation, Court
from cl.search.tasks import add_items_to_solr

cluster_url = "https://www.courtlistener.com/api/rest/v3/search/?format=json"
search_url = "https://www.courtlistener.com/api/rest/v3/search/?format=json"
cluster_endpoint = "https://www.courtlistener.com/api/rest/v3/clusters/"

env = environ.FileAwareEnv()
DEVELOPMENT = env.bool("DEVELOPMENT", default=False)


def get_courtlistener_data(cluster_id: int) -> None:
    """Download data from courtlistener.com and add to local version
    This method takes a cluster id and grabs related docket and opinions and
    save it to local environment
    :param cluster_id: opinion id to clone
    :return: None
    """

    try:
        cluster_obj = OpinionCluster.objects.get(pk=cluster_id)
        print(f"OpinionCluster with id: {cluster_id} already in local env.")
        return
    except Docket.DoesNotExist:

        s = requests.session()
        s.headers = {
            "Authorization": "Token %s" % os.environ.get("CL_API_TOKEN", "")}
        cluster_endpoint = f"https://www.courtlistener.com/api/rest/v3/clusters/{cluster_id}/"
        results = s.get(cluster_endpoint).json()

        cluster_datum = results
        docket_datum = s.get(cluster_datum["docket"]).json()
        court_datum = s.get(docket_datum["court"]).json()
        citation_data = cluster_datum["citations"]
        opinion_data = cluster_datum["sub_opinions"]
        # delete resource_uri value generated by DRF
        del court_datum["resource_uri"]
        del docket_datum["resource_uri"]
        del cluster_datum["resource_uri"]
        # delete fields with fk or m2m relations or unneeded fields
        del docket_datum["clusters"]
        del docket_datum["original_court_info"]
        del docket_datum["absolute_url"]
        del docket_datum["audio_files"]
        del docket_datum["tags"]
        del docket_datum["panel"]
        del cluster_datum["docket"]
        del cluster_datum["citations"]
        del cluster_datum["sub_opinions"]
        del cluster_datum["absolute_url"]
        del cluster_datum["panel"]
        del cluster_datum["non_participating_judges"]
        with transaction.atomic():
            # Get or create required court
            try:
                ct = Court.objects.get_or_create(**court_datum)
            except:
                ct = Court.objects.filter(pk=court_datum["id"])
            docket_datum["court"] = ct[0]

            # Create docket
            Docket.objects.create(**docket_datum)

            for cite_data in citation_data:
                cite_data["cluster_id"] = cluster_datum["id"]
            cluster_datum["docket_id"] = docket_datum["id"]

            # Create opinion cluster
            OpinionCluster.objects.create(**cluster_datum)

            for cite_data in citation_data:
                # Create citations
                cite_data["cluster_id"] = cluster_datum["id"]
                Citation.objects.create(**cite_data)

            for op in opinion_data:
                op_data = s.get(op).json()
                # delete fields with fk or m2m relations or unneeded fields
                del op_data["opinions_cited"]
                del op_data["cluster"]
                del op_data["absolute_url"]
                del op_data["resource_uri"]
                del op_data["author"]
                del op_data["joined_by"]
                op_data["cluster_id"] = cluster_datum["id"]

                # Create opinion
                op = Opinion.objects.create(**op_data)

                # Add opinion to search engine
                add_items_to_solr.delay([op.id], "search.Opinion")

            print(
                f"http://localhost:8000/opinion/{cluster_datum['id']}/{docket_datum['slug']}/")


class Command(VerboseCommand):
    help = "A helper function clone an opinion from courtlistener.com"

    def add_arguments(self, parser):
        parser.add_argument(
            "--cluster_id",
            help="Cluster id, "
                 "opinion cluster id from courtlistener.com eg. 6905720 from https://www.courtlistener.com/opinion/6905720/schaaf-v-schaaf/",
        )

    def handle(self, *args, **options):

        if DEVELOPMENT:

            cluster_id = options["cluster_id"]
            if cluster_id:
                get_courtlistener_data(cluster_id)
        else:
            print("Command not enabled for production environment")
